{"version":3,"sources":["components/Chart/Chart.module.css","components/LineChart/LineChart.module.css","components/CountryPicker/CountryPicker.module.css","components/Favorites/Favorites.module.css","App.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/LineChart/LineChart.jsx","components/CountryPicker/CountryPicker.jsx","components/Favorites/Favorites.jsx","App.js","index.js","components/Cards/Cards.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","match","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","modifiedData","fetchDailyData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","console","log","Charts","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","LineChart","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","default","onChange","e","target","i","key","Favorites","Option","Select","columns","dataIndex","sorter","b","sortDirections","defaultSortOrder","render","record","favorites","onConfirm","handleDelete","setFavorites","selectedCountry","setSelectedCountry","handleAddFavorite","fetchedData","concat","filter","c","onSelect","o","handleSelected","onClick","table","dataSource","Home","location","useLocation","pathname","substring","history","useHistory","countryPicked","push","Chart","App","state","setState","this","exact","path","to","params","React","Component","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.4d2f7f2e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"LineChart_container__1xvez\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Favorites_table__3MWAT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\"};","import React from 'react';\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\nimport CountUp from 'react-countup';\nimport styles from './Cards.module.css';\nimport cx from 'classnames';\n\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate }, match}) => {\n    if(!confirmed){\n        return 'Loading...';\n    }\n    return (\n        <div className={styles.container}>\n            <Grid container spacing={3} justify=\"center\">\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp\n                                start={0}\n                                end={confirmed.value}\n                                duration={1.5}\n                                separator=\",\" />\n                        </Typography>\n    <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of active cases of COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp\n                                start={0}\n                                end={recovered.value}\n                                duration={1.5}\n                                separator=\",\" />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of recoveries from COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp\n                                start={0}\n                                end={deaths.value}\n                                duration={1.5}\n                                separator=\",\" />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of deaths caused by COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default Cards;\n","import axios from 'axios';\n\nconst url = 'https://covid19.mathdro.id/api';\n\nexport const fetchData = async (country) => {\n    let changeableUrl = url;\n    if(country) {\n        changeableUrl = `${url}/countries/${country}`;\n    }\n    try {\n        const { data } = await axios.get(changeableUrl);\n        const modifiedData = {\n            confirmed: data.confirmed,\n            recovered: data.recovered,\n            deaths: data.deaths,\n            lastUpdate: data.lastUpdate,\n        }\n        return modifiedData;\n    } catch (error) {\n        \n    }\n}\n\nexport const fetchDailyData = async () => {\n    try {\n        const { data } = await axios.get(`${url}/daily`);\n        const modifiedData = data.map((dailyData) => ({\n            confirmed: dailyData.confirmed.total,\n            deaths: dailyData.deaths.total,\n            date: dailyData.reportDate,\n\n        }));\n        return modifiedData;\n    } catch (error) {\n        \n    }\n}\n\nexport const fetchCountries = async () => {\n    try {\n        const {data: { countries }} = await axios.get(`${url}/countries`);\n        return countries.map((country) => country.name)\n        \n    } catch (error) {\n        console.log(error);\n    }\n}","import React, {useState, useEffect} from 'react';\nimport { fetchDailyData } from '../../api';\nimport { Line, Bar } from 'react-chartjs-2';\nimport styles from './Chart.module.css';\n\nconst Charts = ({ data: { confirmed, recovered, deaths }, country }) => {\n    const [dailyData, setDailyData] = useState([]);\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setDailyData(await fetchDailyData());\n        }\n        \n        fetchAPI();\n    }, []);\n    const lineChart = (\n        dailyData.length ? (\n            <Line\n            data={{\n                labels: dailyData.map(({ date }) => date), \n                datasets: [{\n                    data: dailyData.map(({ confirmed }) => confirmed),\n                    label: 'Infected',\n                    borderColor: '#3333ff',\n                    fill: true,\n                }, {\n                    data: dailyData.map(({ deaths }) => deaths),\n                    label: 'Deaths',\n                    borderColor: 'red',\n                    backgroundColor: 'rgba(255,0,0,0.5)',\n                    fill: true,\n                }],\n            }}\n            />\n        ) : null\n    );\n    console.log(confirmed, recovered, deaths);\n    const barChart = (\n        confirmed?\n        (\n            <Bar \n            data={{ \n                labels: ['Infected', 'Recovered', 'Deaths'],\n                datasets: [{ \n                    label: 'People', \n                    backgroundColor: ['rgba(0,0,255,0.5)', 'rgba(0,255,0,0.5)', 'rgba(255,0,0,0.5)'],\n                    data: [confirmed.value, recovered.value, deaths.value],\n                }],\n            }} \n            options={{ legend: { display: false }, title: { display: true, text: `Current state in ${country}` } }}/>\n        )\n        : null\n    );\n    return (\n        <div className={styles.container}>\n            { country ? barChart : lineChart }\n        </div>\n    )\n}\n\nexport default Charts;\n","import React, {useState, useEffect} from 'react';\nimport { fetchDailyData } from '../../api';\nimport { Line, Bar } from 'react-chartjs-2';\nimport styles from './LineChart.module.css';\n\nconst LineChart = ({ data: { confirmed, recovered, deaths }, country }) => {\n    const [dailyData, setDailyData] = useState([]);\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setDailyData(await fetchDailyData());\n        }\n        \n        fetchAPI();\n    }, []);\n    const lineChart = (\n        dailyData.length ? (\n            <Line\n            data={{\n                labels: dailyData.map(({ date }) => date), \n                datasets: [{\n                    data: dailyData.map(({ confirmed }) => confirmed),\n                    label: 'Infected',\n                    borderColor: '#3333ff',\n                    fill: true,\n                }, {\n                    data: dailyData.map(({ deaths }) => deaths),\n                    label: 'Deaths',\n                    borderColor: 'red',\n                    backgroundColor: 'rgba(255,0,0,0.5)',\n                    fill: true,\n                }],\n            }}\n            />\n        ) : null\n    );\n    console.log(confirmed, recovered, deaths);\n\n    return (\n        <div className={styles.container}>\n            {lineChart}\n        </div>\n    )\n}\n\nexport default LineChart;\n","import React, { useState, useEffect } from 'react';\nimport { NativeSelect, FormControl } from '@material-ui/core';\nimport styles from './CountryPicker.module.css';\nimport { fetchCountries } from '../../api';\n\nconst CountryPicker = ({ handleCountryChange }) => {\n    const [fetchedCountries, setFetchedCountries] = useState([])\n    useEffect(() => {\n        const fetchAPI = async() => {\n            setFetchedCountries(await fetchCountries());\n        };\n        fetchAPI();\n    }, [setFetchedCountries]);\n    return (\n        <FormControl className={styles.formControl}>\n            <NativeSelect default=\"\" onChange={(e) => {handleCountryChange(e.target.value)}}>\n                <option value=\"\">Global</option>\n    {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\n            </NativeSelect>\n        </FormControl>\n    );\n};\n\nexport default CountryPicker;","import React, { useState, useEffect } from 'react'\nimport { Table, Button, Dropdown, Menu, Select,Popconfirm } from 'antd'\nimport styles from './Favorites.module.css';\nimport render from 'react-dom';\nimport { DownOutlined } from '@ant-design/icons';\nimport { fetchCountries, fetchData } from '../../api';\n\n\nconst Favorites = () => {\n    const { Option } = Select;\n    const dataSource = [\n        {\n            country: 'Ecuador',\n            infected: 31000,\n            deaths: 3200,\n            recovered: 300,\n        },\n        {\n            country: 'USA',\n            infected: 2000000,\n            deaths: 300000,\n            recovered: 70000,\n          },\n      ];\n      \n      const columns = [\n        {\n            title: 'Country',\n            dataIndex: 'country',\n            key: 'country',\n            sorter: (a, b) => a.country > b.country,\n            sortDirections: ['descend', 'ascend'],\n        },\n        {\n            title: 'Infected',\n            dataIndex: 'infected',\n            key: 'infected',\n            defaultSortOrder: 'descend',\n            sorter: (a, b) => a.infected - b.infected,\n        },\n        {\n            title: 'Deaths',\n            dataIndex: 'deaths',\n            key: 'deaths',\n        },\n        {\n            title: 'Recovered',\n            dataIndex: 'recovered',\n            key: 'recovered',\n        },\n        {\n            title: 'Action',\n            key: 'action',\n            //render: () => <a onClick={(e)=>handleDelete(e)}>Delete</a>,\n            render: (text, record) =>\n          favorites.length >= 1 ? (\n            <Popconfirm title=\"Sure to delete?\" onConfirm={() => handleDelete(record.key)}>\n              <a>Delete</a>\n            </Popconfirm>\n          ) : null,\n\n\n        }\n      ];\n\n      const [fetchedCountries, setFetchedCountries] = useState([])\n    useEffect(() => {\n        const fetchAPI = async() => {\n            setFetchedCountries(await fetchCountries());\n        };\n        fetchAPI();\n        console.log(\"called!\")\n    }, [fetchedCountries]);\n\n    const [favorites, setFavorites] = useState([])\n    useEffect(() => {\n        const fetchAPI = async() => {\n            setFetchedCountries(await fetchCountries());\n        };\n        fetchAPI();\n    }, [favorites]);\n\n    const [selectedCountry, setSelectedCountry] = useState(\"\")\n\n    let handleAddFavorite = async () => {\n        const fetchedData = await fetchData(selectedCountry);\n        setFavorites( favorites.concat({\n            country: selectedCountry,\n            infected: fetchedData.confirmed.value,\n            deaths: fetchedData.deaths.value,\n            recovered:fetchedData.recovered.value,\n            key: selectedCountry\n        }))\n        console.log(fetchedCountries)\n        console.log(selectedCountry)\n        setFetchedCountries(fetchedCountries.filter(item => item !== selectedCountry))\n    }\n\n    let handleSelected = (o) => {\n        setSelectedCountry(o)\n    }\n\n    let handleDelete = (c) => {\n        console.log(c)\n        setFavorites(favorites.filter(item => item.key !== c))\n        //console.log(favorites)\n    }\n\n    return (\n        <>\n            <Select onSelect={(o) => handleSelected(o)}>\n            { fetchedCountries.map((country, i) => <Option key={i} value={country}>{country}</Option>) }\n            </Select>\n            <Button onClick={(e) => handleAddFavorite()}>Add favorite</Button>\n            <Table className={styles.table} dataSource={favorites} columns={columns} />\n        </>\n    )\n}\n\nexport default Favorites","import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route, useLocation, Redirect, useHistory} from 'react-router-dom';\n\nimport { Cards, Chart, CountryPicker, Favorites, LineChart } from './components';\nimport { Typography } from '@material-ui/core';\nimport styles from './App.module.css';\nimport { fetchData } from './api';\nimport 'antd/dist/antd.css';\n\nconst Home = ({ data, country, handleCountryChange }) => {\n//     <div className={styles.container}>\n//     <Cards data={data}/>\n//     <CountryPicker handleCountryChange={this.handleCountryChange}/>\n//     \n// </div>\n// <h1>HEY {match.params.country}</h1>\nlet location = useLocation()\n\n  useEffect(\n    () => {\n      console.log(\"New country:\", location.pathname.substring(11));\n      handleCountryChange(location.pathname.substring(11));\n    },\n    [location]\n  )\n\n  const history = useHistory();\n // return history.push('/countries/USA')\n    let handleCountryPicked = (countryPicked) => {\n        history.push('/countries/'+countryPicked)\n    }\n\nreturn (\n    <div className={styles.container}>\n    <Typography variant=\"h2\" gutterBottom> COVID-19 State</Typography>\n    <Typography variant=\"h4\" gutterBottom> Global</Typography>\n    <LineChart data={data} country={country}></LineChart>\n    <Cards data={data}/>\n    <CountryPicker handleCountryChange={handleCountryPicked}/>\n    <Chart data={data} country={country}/>\n    </div>\n)\n\n}\n\nclass App extends React.Component {\n    state = {\n        data: {},\n        country: '',\n    }\n\n    async componentDidMount() {\n        const fetchedData = await fetchData();\n        this.setState({data: fetchedData});\n    }\n\n    handleCountryChange = async (country) => {\n        const fetchedData = await fetchData(country);\n        this.setState({ data: fetchedData, country: country });\n        // const history = useHistory();\n        // return history.push('/countries/USA')\n    }\n\n    render() {\n        const { data, country } = this.state;\n        return (\n            <Router>\n                <Route exact path={'/'} render={() => (<Redirect to='/countries/Ecuador' />)}/>\n                <Route path={`/countries/:country`} render= {({match}) => <Home data={data} country={match.params.country} \n                handleCountryChange={this.handleCountryChange}/>}/>\n                <Route exact path={'/favorites'} component={Favorites} />\n            </Router>\n        )\n    }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App/>, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};"],"sourceRoot":""}